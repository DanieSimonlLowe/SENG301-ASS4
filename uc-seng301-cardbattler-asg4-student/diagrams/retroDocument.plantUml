# PlantUML Editor


@startuml

left to right direction
'skinparam linetype polyline
skinparam linetype ortho

skinparam classAttributeIconSize 0

package accessor <<Folder>> {
class DeckAccessor {
  +createDeck(name: String, player: Player, cards: List<Card>): Deck
}





class PlayerAccessor {
  -players : List<Player>
  +PlayerAccessor()
  +createPlayer(name: String, playStyle: String): Player
  +getPlayerByName(name: String): Player
  +persistPlayer(player: Player): boolean
  +removePlayerByName(name: String): boolean
}
}



package cards <<Folder>> {
Interface CardGenerator {
  getRandomCardOfType(): Card
  getRandomCardOfType(cardType: CardType): Card
}



class CardProxy {
  -cardService: CardService
}



class CardResponse {
  +toString(): String
  +toCard(): Card
}



class CardService {
  +getResponseFromAPI(cardType: CardType): Card
}



enum CardType
}

package cli <<Folder>> {
class CommandLineInterface {
  +CommandLineInterface()
  +getNextLine(): String
  +printLine()
}
}

package game <<Folder>> {
class Action {
  -actor: Card
  -target: Card
  +toString(): String
}



class BattleDeckCreator {
  -cardProxy: CardGenerator
  +BattleDeckCreator(cardGenerator: CardGenerator)
  +populateRandomBattleDeck(deck: Deck)
  +populateRandomBattleDeck(deck: Deck, numMonsters: int, numSpells: int, numTraps: int)
  {static}+deckIsValid(deck: Deck)
}



class Board {
    -monsterSlots: List<Monster>
    -spellSlots: List<Spell>
    -trapSlots: List<Trap>
    -deck: List<Card>
    -hand: List<Card>

    +Board(deck: Deck)
    +playCard(card: Card)
    +draw(amount: int)
    +getDisplayableSlots(idx: int): String
    +cardsAreAllies(c1: Card, c2: Card): bool
}



class Game {
    -board1: Board
    -board2: Board
    -player1: Player
    -player2: Player
    -allCards: List<Card>
    -cli: CommandLineInterface
   +Game(turnLimit: int, cli: CommandLineInterface)
   +startGame()
   +addPlayers(player1: Player, player2: Player)
   +listenForActions(card: Card)
   +stopListeningForActions(card: Card)
   +actionTrigger(playState: PlayState, actor: Card, target: Card)

}



class GameInterface {
    -cli: CommandLineInterface
    -playerAccessor: PlayerAccessor
    -deckAccessor: DeckAccessor
    -cardGenerator: CardGenerator
    -battleDeckCreator: BattleDeckCreator
    +startGame()
    +play()
    +battleDeck(input: String)
    +playGame(input: String)
}



class GameRuntimeException {}


interface PlayerAIOperation {
    execute(allyBoard: Board, enemyBoard: Board, numCardsPlayed: int): Action
}



enum PlayState

Game "users"..> PlayState

class PlayStyles {
    {static} +basicAi(allyBoard: Board, enemyBoard: Board, numCardsPlayed: int): Action
    {static} +monsterFavouringAI(allyBoard: Board, enemyBoard: Board, numCardsPlayed: int): Action
    {static} +setupFavouringAI(allyBoard: Board, enemyBoard: Board, numCardsPlayed: int): Action
    {static} +recklessAI(allyBoard: Board, enemyBoard: Board, numCardsPlayed: int): Action
}



}

package model <<Folder>> {
    package abilities <<Folder>> {
        interface Ability {
            +execute(abilityCard: Card, playState: PlayState, actor: Card, target: card, actorIsAlly: boolean, targetIsAlly: boolean);
        }

        Ability "users"..> PlayState
        abstract class AbstractAbility {
            #ability: Ability;
            +getAbility(): Ability
        }

        AbstractAbility "decorates"-> Ability

        BasicAbility -|> Ability

        ActorIsAllyOrEnemy -|> AbstractAbility
        CanTargetSelf -u|> AbstractAbility
        OnlyIfPlayState --|> AbstractAbility
        OnlyOnType --|> AbstractAbility
    }
    abstract class Card {
        -abilities: List<Ability>
        +reactToAction(playState: PlayState, actor: Card, target: Card, actorIsAlly: boolean, targetIsAlly: boolean)
        +damage(amount: int)
        +heal(amount: int)
        +block(numNextActionsBlocked: int)
        +addAbility(ability: Ability)
    }
    Ability ---* Card

    Card "users"-> PlayState

    enum CardPosition



    class Deck {
        +cards: List<Card>
    }
    Card -o Deck

    Monster -u|> Card
    Spell -u|> Card
    Trap -u|> Card
    class Player {
        -deck: Deck
        -playerAI: PlayerAIOperation
    }
    Player "1"-"0..1" Deck


}

class App {
    {static} main(args: String[])
}

App "users"-> GameInterface


DeckAccessor "users"......> Player
DeckAccessor "users"......> Card
DeckAccessor "creates"......right> Deck
PlayerAccessor "1"*------"0." Player


Board "users"-> CardPosition
CardResponse "users"----> CardPosition
Monster "has a" -up> CardPosition
CardGenerator "creates"......> Card
CardGenerator "users".> CardType
CardProxy -|> CardGenerator
CardProxy "users".u> CardService
CardResponse "creates"....> Card
CardResponse "users" ..> PlayState
CardService "users".> CardResponse
CardService -|> CardGenerator
Action "0...."-"2" Card
BattleDeckCreator "1"------"1" CardGenerator
BattleDeckCreator "intracts with"....> Deck
Monster - Board
Spell -o Board
Trap -o Board
Card -o Board

GameInterface "users"--> CommandLineInterface

Game "2"-"1" Board
Game "2"-"0..1" Player
Game "0.."-"0..1" Card
Game "1"---down"1" CommandLineInterface
Game "1"-"1" PlayerAccessor
Game "1"-"1" DeckAccessor
Game "1"-"0......1" CardGenerator
Game "1"-"1" BattleDeckCreator

Board "throws"..> GameRuntimeException
Game "throws"..> GameRuntimeException
PlayerAccessor "users"....> PlayerAIOperation
PlayerAccessor "users"....> PlayStyles
PlayStyles -[hidden]up> Action

PlayStyles "methods are equivalent to an implementation"-|> PlayerAIOperation
Player "1"-"1" PlayerAIOperation


game -[hidden]> model
CardPosition --[hidden]up> Card
abilities ---[hidden]> Card
cli -[hidden]up> game

accessor ---------[hidden]> cards
accessor ---------[hidden]> game
accessor ---------[hidden]> model
cards ----------[hidden]> model
model ----------[hidden]> cards
cards ----------[hidden]> game
game ----------[hidden]> cards

Game ---[hidden]down> BattleDeckCreator
BattleDeckCreator ---[hidden]up> Game


@enduml